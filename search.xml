<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JQuery小知识点]]></title>
    <url>%2F2018%2F07%2F28%2FJQuery%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%2F</url>
    <content type="text"><![CDATA[廖雪峰部分选择器 常用基础选择器 ID:$(&quot;#id&quot;) Class:$(&quot;class&quot;) Tag:$(&quot;tag&quot;) Attribute:$(&quot;[name=&#39;name&#39;]&quot;) JQ选择器返回的是一个对象，这个对象类似于数组，如果没有查询到指定元素，那么返回[]，不会返回undefined和null。 若果有一个已存在的DOM对象，那么可以通过$(aDomObject)来将其转换为JQuery对象。 查找有多个class的节点时，$(&quot;.class1.class2&quot;),中间没有空格。同样组合查找时多个选择器之间也没有空格，如：$(&quot;input[name=&#39;email&#39;]&quot;),选出input下的name为email的元素。 多项选择时用逗号隔开，如：$(&quot;div,input&quot;)选出div和input标签。 层级选择器用空格隔开，如：$(&quot;div.red input&quot;),选择class为red的div下的所有input。 子选择器用大于号隔开，如：$(&quot;div#parent&gt;div&quot;),选择id为parent的div下的直属div子元素。 过滤器用冒号隔开，如： $(&quot;ul#parent li:first-child&quot;),选择id为parent的ul下的第一个li; $(&quot;ul#parent li:last-child&quot;),选择id为parent的ul下的最后一个li; $(&quot;ul#parent li:nth-child(n/even/odd)&quot;),选择id为parent的ul下的第n个li/偶数li/奇数li; 表单相关： :input 可以选择&lt;input&gt;，&lt;textarea&gt;，&lt;select&gt;和&lt;button&gt; :radio：可以选择单选框，和input[type=radio]一样 :focus：可以选择当前输入焦点的元素 :checked：选择当前勾上的单选框和复选框 其他： :visaible：选择可见的元素 :hidden：选择隐藏的元素 查找和过滤（通常对已经拿到的jq对象进行操作） 向下查找：$(&quot;#aDiv&quot;).find(&quot;.calss1&quot;) 选取父级：$(&quot;selector&quot;).parent() 选取同级：$(&quot;selector&quot;).next,$(&quot;selector&quot;).prev 过滤：jqObj.filter(“selector”),注意返回的是符合过滤器中条件的元素，filter还可以接收过滤函数，这个函数返回符合条件的元素，如： 123jqObj.filter(function()&#123; return this.innerHTML.indexof("s") === 0&#125;) 筛选出文本内容为”s”开头的jqObj中的元素。注意：这里的this是原生dom对象，所以要想使用jq的方法则需通过$(this)来将其转换为jq对象。]]></content>
      <categories>
        <category>JQuery</category>
      </categories>
      <tags>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git 常用命令]]></title>
    <url>%2F2018%2F07%2F13%2Fgit-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[Git随手记一.git add .、git add -u、git add -A的区别 git add .：他会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。—-git 1.x version git add -u：他仅监控已经被add的文件（即tracked file），他会将被修改的文件和删除的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add –update的缩写） git add -A：是上面两个功能的合集（git add –all的缩写） 在git 2.x version后git add . = git add -A git commit -am &quot;···&quot;是git add .和git commit -m &quot;···&quot;的结合体，但只能提交已经追踪过的文件，即只能提交修改不能提交增加。]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript中的点点滴滴]]></title>
    <url>%2F2018%2F07%2F13%2Fjs%E4%B8%AD%E7%9A%84%E7%82%B9%E7%82%B9%E6%BB%B4%E6%BB%B4%2F</url>
    <content type="text"><![CDATA[这里记录一些js学习中遇到的问题及解决方案，也是对js知识的积累。 为DOM元素添加事件的一些问题今天在学习ajax的时候，给页面的button按钮添加onclick事件时，发现了下面一些问题： 1btn.onclick = request(); 这样写会页面加载会直接执行request函数。 1btn.onclick = request; 这样则不会直接执行，但面临的问题是如果需要传递参数怎么办？于是有了下面这种写法 123btn.onclick = function(arg)&#123; request(arg);&#125; 所以在为元素添加事件，包括添加监听事件以及jQuery的写法中，如需传参，都要按照函数内调用函数这种写法才能保证事件能够正确绑定。 在元素的特性中的写法则为： 1&lt;button onclick="request()";&gt;请求&lt;/button&gt; 回调函数的理解 在JavaScript中，回调函数具体的定义为：函数A作为参数(函数引用)传递到另一个函数B中，并且这个函数B执行函数A。我们就说函数A叫做回调函数。如果没有名称(函数表达式)，就叫做匿名回调函数。 例如forEach方法： 123arr.forEach(function(value,index,arr)&#123; //这里就是回调函数&#125;)]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown 语法整理]]></title>
    <url>%2F2018%2F05%2F04%2Fmarkdown-%E8%AF%AD%E6%B3%95%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[文字居中：&lt;center&gt;居中文字&lt;/center&gt;。 多行空行：&amp;nbsp;,每个但独占一行，代表一个空行，多个空行用回车分割开来。]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[真心可贵 愿你珍惜]]></title>
    <url>%2F2018%2F05%2F04%2F%E7%9C%9F%E5%BF%83%E5%8F%AF%E8%B4%B5-%E6%84%BF%E4%BD%A0%E7%8F%8D%E6%83%9C%2F</url>
    <content type="text"><![CDATA[真心可贵 愿你珍惜&nbsp; 再好的缘分也经不起敷衍再深的感情也需要珍惜眼前歌可以单曲循环人不能错过再现情可以平平淡淡心不能视而不见在乎你的人不在乎天长地久更在乎你想不想拥有原谅你的人愿意原谅你的一切因为不愿意失去有你的世界懂得善待才能相守珍惜当下才配拥有没有谁天生是属于谁的任何人来到你身边愿意为你停下脚步都是一件值得珍惜的事这世上什么东西都有个保质期没有比心存感激更好的保质方法爱是用心 不是敷衍其实好的爱情根本不会让你心力交瘁的去经营爱你的人也不会让你担惊受怕害怕他离开不合脚的鞋就脱了不合适的人就放手不必为了挽留任何人而低声下气反正怎么都是一生你别怕 总有人熬夜陪你下雨接你 说我爱你好的总是压箱底遇到了记得要珍惜现在的世界太宝贵现在的人也太聪明三句想你 两句喜欢 一句爱七天追不到就拜拜不需要知道你的生日不用了解你的爱好更不用深究你的性格有颜值有身材他就爱左手一个段子右手一条甜言蜜语点开不同的对话框发着同样的信息从什么时候起价值连城的感情变得这么机关算尽为什么不能坐下来慢慢吃顿饭然后好好聊很久的天讲讲你的经历 我的过往你的价值观 我的人生观聊聊我们彼此想要的爱情是什么模样我们在经历一个速食爱情和快餐婚姻的年代分开的越来越快的原因是因为没有足够的时间和耐心去了解一个人更没有时间去原谅和等候一个人比时间更缺的是了解一个人的欲望与心情真心可贵 愿你珍惜]]></content>
      <categories>
        <category>美文</category>
      </categories>
      <tags>
        <tag>美文</tag>
        <tag>人生</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hackintosh遇到的问题以及解决方案]]></title>
    <url>%2F2018%2F05%2F03%2FHackintosh%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[安装好黑苹果后有许多要完善的地方以及使用中会遇到各种问题，这里记录一些偶然解决的问题的方案以及过程。 【2018.5.2】USB问题以及睡眠自动唤醒起因是插了U盘后发现提示需要为USB配件提供电源而导致USB设备无法使用，在远景搜索后有提示说吧USBInjectAll这个驱动删掉，删掉后重启发现问题解决但USB3.0达不到5G而且摄像头也不能加载，于是这并不能当做解决方案，后来就在想是不是因为DSDT的原因（因为用的是论坛大神帮忙修改的解决自动唤醒的DSDT），可是发现换回原来的DSDT也是不行，于是就回想在USB正常之前做了哪些改动： 修改了CPUfriend和CPUprovider。 升级了Clover版本。 clover勾选了change EC0 to EC、change H_EC to EC两个补丁 于是一步一步复原，复原第一步时，发现删除了两个驱动后变频并没有受到改变，和删之前是一样的，之前误认为修改生效，事实证明这两个驱动对本电脑是有负面影响的。复原第二步发现依然提示需要为USB配件提供电源，于是复原第三步，重启发现问题解决了。而令人意外的是，晚上睡觉之前睡眠第二天早上也没有自动唤醒，说明自动唤醒的问题也解决了。 总结： 变频是原生加载了的，虽然原因未知 自动唤醒是受两个CPU驱动的影响（后测试是因为电源管理的唤醒以供以太网访问选项引起的） USB配件需要电源时因为误勾选了那两个clover补丁 【2018.5.3】睡眠唤醒无声睡眠唤醒无声，看到了这样一篇帖子：Realtek ALC282使用applealc applehda原生声卡并解决睡眠唤醒无声问题，于是从AppleALC的github项目主页上下载了最新版本（1.2.6），而当前用的是1.2.3版本，看了更新日志，在1.2.5就已经在ALC驱动当中加入了解决睡眠唤醒无声的CC以及EAPD的驱动，于是把clover的ALC驱动更新到了最新版，经测试，不删除原有的CC会导致唤醒依旧无声，在帖子当中也看到了，要想利用CC解决唤醒无声的问题还需要修改CC的参数。 总结： AppleALC驱动在1.2.5后更新了CC驱动，可以直接解决睡眠唤醒无声的问题而不需要也不可以同时存在CC驱动。 CC驱动需要配合自身声卡的参数才可以生效。 【2018.5.5】变频问题 由于原来的X86PlatformPlugin签名验证失败，所以更换了原版的IOPlatformPluginFamily.kext，修复权限后解决。 先更换了7.2的机型使用ssdtPrGen.sh生成了变频ssdt，然后换回了9.1的机型（只有9.1的机型开机不卡顿） ssdtPrGen生成的ssdt和XCPM.ssdt（设置PluginType=1）的效果相同，都是为了加载两个x86以及完善电源管理面板。 测试中发现只有配合CPUFriend和CpuDateProvider才可以正确加载x86，而变频效果受后者驱动的影响。 目前采用的变频方法为 SSDT-XCPM.ssdt和CpuFriend.kext以及CPUDateprovider.kext的配合。 通过使用不同的机型plist生成不同变频效果的CpuDateprovider.kext。 目前采用修改过最低频率为800MHz的12.1的变频数据。 更新：测试MBA7.2并修改最低频率为800的变频数据更合适。 【2018.5.15】亮度最大值问题之前在搞10.13的亮度调节时参照了这个帖子移动版Intel核显使用hotpatch实现亮度调节的方法，后更新了第二版。再详细看过教程以后，发现1.大部分笔记本无需注入EDID于是删掉，2.之前放入AppleBacklightInjector亮度不能够最大的原因和ig-platform-id有关，于是想到当前显卡驱动的方式是SSDT-IGPU自动注入的，查了FB数据发现用的是0x16260004，于是删掉了这个ssdt，并在注入了clover推荐的id：0x16260006.重启，亮度达到了最大值，之前采用的方法是删除AppleBacklightInjector驱动，但亮度调节档位不均匀。总结：使用ABI驱动来调节亮度的话一定要使用正确的ig-platform-id，否则会影响最大亮度值。驱动要安装到S/L/E或者L/E，安装在clover需要将inject kexts设置为Yes。 【2019.4.4】更新10.14.4在10.13.6下稳定体验了将近一年的时间了，今天忍不住更新了10.14.4（MacOS Mojave）。虽说更新内容并没有什么吸引我的地方，但是作为强迫症的我一向习惯保持软件为最新状态。在U盘都没有的情况下，我真不知道我哪来的勇气去直接更新。但是令我没想到是，整个过程竟是如此顺利： 更新clover到最新版本（直接下载了driver64.efi替换旧版本即可）。 更新驱动到最新版。 到应用商店下载macOS Mojave，点击安装，一路next。 很幸运一路没有五国。 开机显卡正常，WiFi正常，修复权限重建缓存后声卡正常。 变频无法最低800，后提取了新的MacBook7.2的变频文件，更新了CPUFriend.kext，并按照以前的帖子重新制作了CPUDateProvider.kext，开机后恢复最低800频率。 【2019.4.8】更换显卡驱动方式以及亮度调节方式目前各种显卡大多都依赖者WhatEverGreen这个驱动，今天也想通过这种方式来驱动我的HD5500。于是就仔细浏览了WEG的官方使用说明，结合黑果小兵关于Hackintool的教程成功驱动了显卡，并应用了最新的亮度调节方法。 以下只是概述，具体操作还要按照上边两个帖子一步一步来。 以前的驱动方法： 注入合适的ig-plateform-id，对于HD5500就是0x16260006（HD6000的id） 使用ssdt-IGPU自动注入（后测试此方法不完美，影响亮度调节的档位及最大值） 现在的驱动方法： 配合WEG驱动，使用Hackintool在clover的Device中打补丁，实际上就是注入显卡的各种数据，目前用到的有：ig-plateform-id、修改显存2048M、修改DVMT值、禁用eGPU。 对于BIOS的DVMT Pre-Allocated值大小32M而又无法调节的机型， 需要采用一些方法：最早是通过clover的kexttopatch打补丁，每次更新需要换补丁；后来通过InterGraphicDVMTfixup驱动来防止内核崩溃；现在采用的方式是Hackintool在clover的Device中打补丁解决。 以前的亮度调节方法： 安装AppleBacklightInjector.kext驱动。 kexttopatch打补丁。 放入SSDT-PNLF。 现在的亮度调节方法： WhatEverGreen.kext。 勾选AddPNLF的DSDT补丁与SetIntelBacklight, SetIntelMaxBacklight两项，无需为其赋值，Clover 会根据相应的处理器型号自动适配。要想亮度调节完美，同样需要选择好最合适的ig-Plateform-id。 【2019.4.9】终于对我的ar9565蓝牙死了心算一算折腾黑苹果也已有两年的时间了，在不断完善黑苹果的路上也算是经历了众多坎坷，一次一次的尝试，一次一次的失败，不断从失败中寻找经验，从而使我在这个过程中学到了不少Hackintosh的经验和技巧，虽说目前大部分硬性要求已经达到，可是有一个问题一直困扰着我，那就是—-蓝牙，下面就说一下我关于折腾蓝牙的部分经历吧。 说起蓝牙，那必须得先说一下无线网卡了。我这无线网卡折腾过程可谓是一波三折。 记得第一次接触黑苹果的时候是2017年5月份，那时候是10.12.2的系统。安装过程就不说了，那时候了解到我自带的RTL8723BE无线在黑果上无解，如果想用无线那就必须得更换无线网卡，可就在我考虑要换什么无线网卡的时候，又了解到了惠普电脑的BIOS有白名单限制这回事，也就是说如果我想换无线还得刷BIOS，本身风险就很大，再加上网上有没有我这个机型刷BIOS的相关教程，所以我就没再尝试了。直到后来听说有USB无线网卡这个东西，就立马在某宝上定了一个支持黑苹果的，买回来确实可以用，这是我第一次在macOS上用到WiFi，但是各方面都不尽人意，尤其是网速，离得稍微远一点就特别慢，比内置的效果差太多，可是也没别的办法啊，所以就将就了。 第二次安装黑苹果是在2018年的5月份，安装的版本是10.13.6.中间也是折腾了好久，这是我无线网卡的第二次进展，起因是帮室友的华硕安装黑苹果后发现他的无线网卡居然可以驱动，在论坛上搜了几篇教程后成功把他的AR9565网卡驱动了，WiFi没问题，蓝牙可以检测到硬件，不过搜不到设备（这个问题是可以解决的），因为他不用蓝牙，所以也就没再帮他折腾了。这个时候我突发奇想，想亲眼见识一下惠普的白名单限制到底是怎么一回事，于是把室友的无线网卡拆了装在我电脑上，可是奇迹发生了，电脑竟然顺利的开机了，并且在Windows下WiFi蓝牙一切正常，再进macOS，WiFi同样可以驱动，但是蓝牙却检测不到设备。经过一系列的努力最终以失败而告终，但是有WiFi用了岂不也算是一个很大的进展了，于是在某宝购买了全新的AR9565······（日后更新） 【2019.4.12】修复开机登录界面鼠标卡顿今天又是值得纪念的一天，因为刚刚解决了从10.3到10.14一直困扰着我的问题————只能用MacBook Pro 9.1的机型，别的机型开机登录界面卡的不行，体验极差，但是我的显卡最合适的机型是MacBook Air 7.1/7.2 Macbook Pro 12.1； 起因是听说机型的设置会影响到USB的完善，所以想着一定要先把机型设置的问题解决了，于是我就又回到论坛看看有没有新的解决方案，经过对多个帖子的分析，确定了是HDMI port的锅，其中一篇帖子说的非常详细，http://bbs.pcbeta.com/viewthread-1751631-1-1.html，原因就是Framebuffer里定义的接口数大于实际接口数，系统就会不断去扫描不存在的接口，导致卡顿。于是我就去找屏蔽接口的方法，论坛里的方法基本上都是通过clover打补丁来限制HDMI接口数，可问题是这些补丁都是10.14之前的，突然又感到绝望了。而这个时候脑子想到了port limit这个词，感觉特别熟悉，然后打开了Hackintool，去补丁里一看，还真有个Framebuffer port limit，但是不知道有没有用，管他呢先试试再说。于是备份config，更换机型，打上补丁，开机······流畅的登录界面又回来了哈哈哈！成功换回了我的MacBook Air 7.2机型。 【2019.4.12】解决EC0 to EC补丁打上就无法开机的情况在定制USB的过程中有个步骤是打rename EC0 to EC的补丁，但是我只要打上这个补丁，就会开不开机。后来想明白了hotpatch的原理，其实也就是从原始dsdt中找到某个字符的hex值，通过替换数值来改变某个变量的名字。于是我打开了我的DSDT，搜索EC0，发现有51个结果，而其中有50个都是正常的变量名，只有一个是一串16进制的数值中所包含的EC0，于是我点击replace all发现这个数值也被改变了，而数值的变动影响是非常严重的，于是我把这个数值中的EC0排除，替换其他EC0为EC，保存重启，顺利进入系统。因此，hotpatch一定要避免“误伤”。 后不再采用手动修改dsdt的方法了，因为找到了rehabman的一个hotpatch，同样是EC0 to EC的补丁，但是和Hackintool的补丁并不一样，Hackintool的补丁仅仅是字符串完全的翻译，而rehabman的补丁是EC0_ to EC_ ,仅仅是了个下划线，效果就完全不同了，很好的避免了误伤的情况。但是很显然在dsdt中并不能搜索到EC0_,可为什么这个补丁可以找到EC0呢？看以后能否找打答案吧。 【2019.4.15】关于USB的一些经验猜想之前一直不明白为什么我的电脑明明只有一个USB3.0插口，但是我的所有设备只要连接到电脑都会挂载到USB3.0总线上，本来以为是Mac没驱动好，可是在win下边也同样如此。后来看过一些USB相关的教程，了解到这是采用了UEFI新型启动方式的原因，新型的UEFI启动会把所有的USB设备挂载到USB3.0上，所以说Mac下的USB设备挂载到3.0下是正常的。 在完善USB驱动的时候总会看到教程里边让打各种hotpatch的补丁，现在对于这些补丁的理解是，苹果机器在不断更新换代的过程中可能会更新各种驱动以及ACPI设备的描述命名，只有把非苹果的电脑的相关变量名改为白苹果的才能使OS的驱动和dsdt相互对接，从而正常工作比如EH01、EH02、XHC，这些都是白苹果下的变量名。 有时候会遇到USB配件需要电源的情况，这个其实就是上边说过的机型的设置会影响USB的驱动，可能会造成无法为USB提供电源的情况。还有一个最重要的原因就是EC补丁，从10.12开始macOS开始使用EC作为嵌入控制器，而大多数PC使用的是EC0或者H_EC，所以说要把相关变量命名为EC才能使AppleBusPowerController正常加载，这个驱动是给USB加电的前提，用来注入电源属性。而下一步才是SMBIOS的设置会影响到USB电源的问题，IOUSBHostFamily Info.plist中可以看到，缺少较新的SMBIOS。如MacBookPro9,1，iMac17,1和MacBookPro13等。这些模型必须使用不同的方法进行USB电源属性注入–对应机型的USBX，Hackintool可以生成。详细信息请看：https://www.tonymacx86.com/threads/guide-usb-power-property-injection-for-sierra-and-later.222266/ 。 ###【2019.4.16】起死回生的AR9565 新购的BCM94352HMB已经在路上了，所以此刻的我已经放弃折腾我的AR9565了，我断定蓝牙问题是因为这个9565与我的主板不兼容（尽管通过淘宝了解到只要没有白名单，接口对上，那么基本就是兼容的）。 今天在刷帖子的时候，无意看到了这么两篇帖子： [教程] 装完系统后的一件事，Clover Acpi hotpatch给机器打补丁。 hotpatch哪些重命名补丁才是自己需要的？ 看完这两篇帖子之后，才明白了hotpatch的实质作用：按照白苹果的命名规则给dsdt重命名使驱动和硬件完美对接从而保证系统的正常运行。 既然这样，那么只要是适用自身dsdt的补丁岂不是都可以打，而且可以说百里无一害。于是我开始按照第一篇帖子的教程给我的dsdt打补丁，把每一个能在我dsdt中搜索到的名字都进行了重命名，并且附加了相应的ssdt文件，然后重启。 期间在rehabman的帖子中发现IRQ补丁可以通过clover的fix功能实现于是移除了我dsdt的IRQ补丁，在clover的fix中勾选了FixHPET、FixIPIC、FixRTC以及FixTMR四个选项，开机声卡正常。 本以为系统以及足够完善，开机应该不会有太大的变化，可是奇迹出现了，蓝牙图标居然出来了，AR9565驱动了！尽管搜不到信号，但这是固件上传不成功导致的，通过win热启动就好了。 仅仅是打了hotpath补丁，没想到就解决了困扰了我这么久的问题，可是具体是哪一个hotpatch解决的，我并不清楚，本来以为是我的EH01和EH02这两个补丁少了ssdt的配合，可是移除了ssdt蓝牙依旧可驱，也或许是某些hotpatch的共同作用吧，不再纠结于此了。至少现在可以确定我的蓝牙USB通道现在没问题了，为下一步的BCM94352HMB做好了基础。 另外还有些心得请看这篇帖子：http://bbs.pcbeta.com/viewthread-1812424-1-1.html ###【2019.4.17】完善亮度功能键 目前用了键盘驱动后各项功能键都正常，除了两个亮度调节功能键。 今天在论坛看到了一个brightkey的ssdt，它的作用就是直接修改dsdt中快捷键（_QXX）的method来调用亮度调节。于是在dsdt中找到了我的两个亮度调节对应的是Q11和Q12，键盘的名称是PSKB，然后再brightkey的ssdt中修改对应参数。不过重启后还是不行，后来直接将ssdt的方法写入了dsdt，重启后依然无果。后来在设置快捷键的时候发现两个按键变成了F14和F15，于是插上USB键盘，呼出了亮度调节快捷键设置的面板选项，将亮度调节快捷键设置为F14和F15，成功实现了亮度调节功能键。 后来了解到通过ssdt改写dsdt中设备方法的时候要使原来的方法无效才行，于是通过hotpatch把原来的Q11和Q12改成了别的，实验成功，避免了修改dsdt。 ###【2019.4.18】更换BCM94352HMB以及定制USB3.0 更换BCM94352HMB的过程见这篇帖子：最终还是入手了BCM94352HMB，顺便说一句，真香！ 笔记本定制USB要简单许多，因为端口较少，不会有端口限制。所以直接照着win下的端口定制了。 我的电脑只有一个USB3.0的接口。蓝牙摄像头以及连接到3.0总线的2.0hub都要设为内建。对于3.0的接口，插入2.0设备和3.0设备时候走的虚拟端口是不一样的，于是用3.0的U盘插入3.0的口，发现我的对应的是port12，插入2.0设备时候是port1，直接用Hackintool把对应端口设置好： port1：USB3.0的2.0虚拟端口（USB2） port2：USB2.0hub（internal） port3：USB2.0hub（internal） port4：蓝牙（internal） port5：摄像头（internal） port12：USB30.的3.0虚拟端口（USB3） 把生成的USBport.kext放入clover引导，删除了USBinjectall驱动，开机一切正常，USB3.0可以5G，插入不同设备走不同的虚拟端口。 ###【2019.4.19】EC0 to EC 又换回了hotpatch方式 之前发现Hackintool的这个hotpatch会使我的dsdt出错后，采用了直接在dsdt中查找替换的改名方式，现在发现rehabman的EC0_ to EC_补丁很完美，于是不再修改dsdt中的EC0，改用hotpatch方式。 截止目前dsdt还剩下一个instant wake补丁，别的都通过hotpatch方式来完成了。 ###【2019.4.21】采用MBA7.2的原生变频 经过多次试验，发现采用和SMBIOS相匹配的变频效果是最好的，因此不再需要CPUFriend两个驱动了，系统直接调用MBA7.2的变频文件，不再修改最低频率，按照白果的1300来了。发热并没有增加很多，可能功耗会少许增加，但带来的是速度的提升和噪音的减少，风扇不会再像以前那样突然间猛转，变得稳定了许多，档位也很均衡，用Hackintool测试得到的结果是1300、1400、1500、1600、2000、2100、2200、2500八个档位。 【2019.4.23】彻底摆脱dsdt patch发现定制了USB后（蓝牙摄像以及USB3.0总线上的2.0hub都设为内建）不需要再打instant wake的补丁了，不会睡眠秒醒了。现在可以实现鼠标唤醒了。目前所以的dsdt补丁都由hotpatch来完成了，patched文件夹已经不再放入dsdt了。]]></content>
      <categories>
        <category>黑苹果</category>
      </categories>
      <tags>
        <tag>黑苹果</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用CPUFriend.kext实现变频]]></title>
    <url>%2F2018%2F04%2F30%2F%E5%88%A9%E7%94%A8CPUFriend-kext%E5%AE%9E%E7%8E%B0%E5%8F%98%E9%A2%91%2F</url>
    <content type="text"><![CDATA[【2018.5.3更新】经后来测试发现修改后CPU驱动并没有加载，删掉了修改后的两个驱动和删前是同样的变频效果，甚至还有几个负面影响，详见下篇博客。 黑苹果CPU的变频受多重因素的影响，如SMBIOS机型、电源管理、x86驱动是否加载等，本机在安装10.13.4后，电源管理正常，x86正常加载，为解决开机卡顿的问题改了MP9.1的机型，但是变频不正常，最低档位1000，最高档位2700，导致温度有时较高，在采用了CPUFried后变频有所改进，最低档800，最高2200，但这种变频变频也有所牺牲，档位只有四个，并且电源管理面板也不完善。 原贴地址：CPUFriend - 动态注入 CPU 电源管理数据 下载CPUFriernd.kext 下载ResourceConverter.sh 在ResourceConverter.sh所在目录运行以下命令./ResourceConverter.sh --kext /System/Library/Extensions/IOPlatformPluginFamily.kext/Contents/PlugIns/X86PlatformPlugin.kext/Contents/Resources/Mac-F60DEB81FF30ACF6.plist其中后边的文件按目录找到对应SMBIOS机型board-ID对应的plist拖入终端即可，其中board-ID可以用clover查看 完成后在ResourceConverter.sh同级目录下会生成一个CPUFriendDataProvider.kext文件，将其连同CPUFriend.kext放入clover的kext下即可 重启查看变频效果&nbsp; &nbsp; 【2018.5.5】看了几篇技术贴： 关于 Broadwell 的加载原生电源疑问 Native Power Management for Laptops 经过不断地测试，初步可以总结出以下几点经验： 要想对变频效果进行调整及优化，首先确保要加载了原生电源管理，体现在两个X86加载，有完整的电源管理面板。 加载X86有两种方法： 采用ssdtPRGen.sh生成的ssdt。 采用SSDT-XCPM.ssdt，clover设置plugin-Type=1（适用于Haswell后的CPU） 理论上应该如此，但在实际测试中需配合CPUFriend和CPUDateProvider才可以实现加载x86 以及完整的电源管理面板。 当以上情况满足后，就可以通过CPUDateProvider来提供变频所需要的数据，可以尝试不同机型的plist生成的CPUDateProvider，以达到最佳变频效果。]]></content>
      <categories>
        <category>黑苹果</category>
      </categories>
      <tags>
        <tag>变频</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MAC实用技巧]]></title>
    <url>%2F2018%2F04%2F22%2FMAC%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[MAC下的技巧太多太多，这里只整理一些平时比较常用的来提高工作效率 快捷键 Cmd + Shift + .：显示隐藏Finder文件 。 Cmd + Option + V：相当于剪切粘贴。 Cmd + Tab ：切换不同应用。 Cmd + ~：切换当前应用不同窗口。 Cmd + I：显示简介。 Cmd + Q：退出当前程序。 Cmd + ↑：回到顶端。 Cmd + ↓：到最底端。 Cmd + 拖动：状态栏上的图标排序和删除。 Cmd + 拖动：可以在不激活的同时拖动非焦点窗口。 Cmd + Space ：打开sportlight，打开搜索项所在目录的快捷键是选蓝后按 Cmd + Enter 。 Cmd + Shift + S：另存为文件。 Cmd + Option + Delete：永久删除。 Ctrl + ↑：预览所有应用窗口。 Ctrl + ↓：预览当前应用窗口。 Ctrl + ←：上一个Space。 Ctrl + →：下一个Space Ctrl + Cmd + Space：输入emoji，图片字符，特殊符号。 Option + 点击Dock图标：隐藏/显示 在预览中启用放大镜：~。 选中文件时点击空格实现预览，按着option点空格全屏预览，包括各种文件。 大多数win下的快捷键把Ctrl换为Cmd即可。 隐藏的功能 分屏：长按左上角全屏的绿色按钮即可。 跳过百度云大文件检测：Safari开发选项中使用win下的浏览器代理。 归类文件：选中多个文件右键选择使用多个文件新建文件夹。 MD5校验，终端：MD5 文件名。 kextstat | grep -v &quot;com.apple&quot; 显示除了苹果之外的驱动加载kextstat | grep -v &quot;com.apple&quot; | grep -v &quot;Energy&quot; 查看加载的非官方驱动 未完待续。。。]]></content>
      <categories>
        <category>MAC</category>
      </categories>
      <tags>
        <tag>MAC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 小技巧]]></title>
    <url>%2F2018%2F04%2F19%2Fhexo-%E5%B0%8F%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[文章设置多标签：tags: [标签1,标签2，···]]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[惠普r221tx 安装high sierra 10.13.4]]></title>
    <url>%2F2018%2F04%2F19%2F%E6%83%A0%E6%99%AEr221tx-%E5%AE%89%E8%A3%85high-sierra-10-13-4%2F</url>
    <content type="text"><![CDATA[一、下载镜像 这里使用黑果小兵镜像10.13.4 二、镜像写入U盘 在win下使用transmac写入镜像，先格式化为hfs格式，在选择镜像写入（注意transmac要以管理员身份运行） 三、修改BIOS 关闭安全启动 选择U盘启动方式 进入安装界面 选择-V启动，如果卡++++，更换OsxAptioFixDrv-64.efi 卡Service only ran for 0 seconds. Pushing respawn out by 10 second，10.13后笔记本需要屏蔽独显安装，这里采用hotpatch屏蔽独显，将SSDT-DDGPU.ssdt放入clover/acpi/pached 惠普电脑clover需勾选Kernel Lapic 选择磁盘工具，进行抹盘，固态硬盘可选择APFS格式，要求硬盘的EFI分区不小于200M否则会抹盘失败 根据提示进行安装，安装过程中需重启数次，每次重启要在clover界面选择之前安装的盘符启动 不出意外的安装步骤已经结束了，接下来就是对驱动的完善以及变频的优化 四、逐步完善 显卡驱动，一开始安装的时候采用的是注入ig-platform-id的方法驱动，我的HD5500采用的id为0x16260006，安装以后用的SSDT-IGPU.ssdt，新版本的IGPU的hotpatch可自动注入id。安装时直接采用hotpatch暂未尝试 声卡驱动，clover注入id为3，加入AppleALC.kext以及Lilu.kext，然后发现并不能驱动，后来尝试在DSDT中打了IRQ的补丁，重启驱动成功 网卡驱动，根据自己型号选择，本机采用的RTL8100的kext 亮度调节，使用SSDT-PLNF.ssdt和RMCF.ssdt配合AppleBacklightInjector.kext。参考帖： 移动版Intel核显使用hotpatch实现亮度调节的方法 在使用本方法遇到一个问题，最大亮度不是硬件上最亮的问题。在尝试中发现移除了SLE的AppleBacklightInjector.kext后亮度依然可以调节（中途误删了AppleBacklightExpert.kext），并解决了最大亮度的问题，但亮度调节档位不均匀。—–后采用0x16260006的ig-platform-id解决，无需删除ABI驱动。 电池驱动，在10.12.x的时候采用的是DSDT打相似电池补丁以及配合AcpiBattery.kext的方法。在10.13.4的时候发现直接就驱动了，可能是新版本的电池驱动原生支持了本电脑。 开机唤醒登录界面面卡顿，更换了许多SMBIOS的机型都没有成功，最后在搞变频的时候看到了这样一篇帖子：一条命令教你如何确认自己的机型及如何开启HWP在把机型设置为符合条件的机型MacBook9.1后开机卡顿消失。 修改系统分配的核显到2048M，采用远景大神开发的工具：[原创工具]自动生成核显补丁,提升显存至2G,还可以提取FB数据 睡眠唤醒无声，更新最新版的ALC驱动，并删除CC和EAPD驱动 完善变频，通过CpuFriend和CpuDateProvider动态注入变频数据，目前采用MBA7.2的变频数据并修改最低频率为800MHz。具体用法：CPUFriend - 动态注入 CPU 电源管理数据。]]></content>
      <categories>
        <category>黑苹果</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
        <tag>黑苹果</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo功能配置]]></title>
    <url>%2F2018%2F04%2F18%2FHexo%E5%8A%9F%E8%83%BD%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[一、更换主题 下载主题，Next主题 放入theme文件夹修改配置文件theme: Next 关闭目录自动展开：修改主题配置文件sidebar-&gt;disply: hide 选择主题风格：修改Schemes 二、添加分类、标签、搜索等栏目 添加分类：hexo new page categories，会在source目录下生成categories文件夹，修改配置文件: 12345---title: date: 2017-05-02 22:27:12type: &quot;categories&quot;--- 即添加type: &quot;categories&quot;参数 添加标签：hexo new page tags 添加关于：hexo new page about 添加搜索：npm install hexo-generator-search --save，修改hexo配置文件，添加如下内容： 12345search: path: search.xml field: post format: html limit: 10000 修改主题配置文件： 12local_search: enable: true 添加站点地图：npm install hexo-generator-seo-friendly-sitemap --save，修改hexo配置文件： 12sitemap: path: sitemap.xml 修改主题配置文件： 1sitemap: /sitemap.xml || sitemap 添加RSS订阅：npm install hexo-generator-feed --save，修改主题配置文件rss: /atom.xml]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于hexo源文件的迁移与部署]]></title>
    <url>%2F2018%2F04%2F17%2F%E5%85%B3%E4%BA%8Ehexo%E6%BA%90%E6%96%87%E4%BB%B6%E7%9A%84%E8%BF%81%E7%A7%BB%E4%B8%8E%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[为解决意外情况hexo源文件丢失的情况，采用在GitHub的建站仓库上创建一个额外的分支来存放源文件的方法。 一.初次搭建hexo静态博客 创建仓库：change-Y.gitHub.io； 新建一个Readme（不然可能由于空仓库无法进行下边的新建分支操作）； 新建一个分支hexo用来存放hexo源文件，并设为默认分支（master用来存放静态页面，我们今后只需要对hexo分支进行操作即可）； 通过git clone 将change-Y.github.io克隆到本地； 在本地change-Y.github.io文件夹下执行hexo init、npm install 和 npm install hexo-deployer-git（在此步骤操作过程中可能会初始化hexo失败，提示change-Y.github.io不是空的文件夹，删了文件夹下隐藏的.git文件夹依然不可以，于是将.git文件夹备份，新建了一个空文件夹，待初始化完以后将.git放入文件夹。）； 修改_config.yml中的deploy参数，分支应为master，可在type参数下新建参数与branch: master(因为此前设置的hexo为默认分支)； 依次执行git add .、git commit -m &quot;...&quot;、git push origin hexo提交网站相关的文件； 执行hexo g -d生成网站并部署到GitHub上。 二.日常的改动流程 提交源文件到hexo分支，依次执行git add .、git commit -m &quot;...&quot;、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）； 部署hexo，hexo g -d 三、本地资料丢失后的流程 安装nodejs、git、hexo。安装hexo时如遇到权限错误可在安装命令前加sudo。 设置用户名和邮箱，关联远程仓库和添加公钥，参考手把手教从零开始在GitHub上使用Hexo搭建博客教程(一)-附GitHub注册及配置 使用git clone git@github.com:change-Y/change-Y.github.io.git拷贝仓库（默认分支为hexo）； 在本地新拷贝的change-Y.github.io文件夹下通过Git bash依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。 部分内容摘自知乎CrazyMilk的回答，感谢！]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown简单用法]]></title>
    <url>%2F2017%2F05%2F02%2FMarkdown%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[12345678用法与规则：您可以手动输入 Markdown 符号。### 标题使用“#”加空格在行首来创建标题例如：# 一级标题## 二级标题### 三级标题 1234567891011121314151617181920212223242526### 加粗功能使用一组星号“**”或一组下划线“__”来加粗一段文字例如：这是**加粗的文字**这也是__加粗的文字__### 居中使用一对中括号“[文字]”来居中一段文字，也可以和标题叠加使用例如：[### 这是一个居中的标题]### 引用使用“&gt;”在段首来引用一段文字例如：&gt; 这是一段引用&gt; 这是一段引用### 无序列表使用“-”、“*”或“+”加空格来创建无序列表例如：- 这是一个无序列表+ 这是一个无序列表* 这是一个无序列表### 有序列表使用数字圆点加空格如“1.”、“2.”来创建有序列表例如：1. 这是一个有序列表2. 这是一个有序列表3. 这是一个有序列表]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
